package com;

import java.math.BigInteger;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.List;
import org.fisco.bcos.sdk.abi.FunctionReturnDecoder;
import org.fisco.bcos.sdk.abi.TypeReference;
import org.fisco.bcos.sdk.abi.datatypes.Address;
import org.fisco.bcos.sdk.abi.datatypes.Bool;
import org.fisco.bcos.sdk.abi.datatypes.Event;
import org.fisco.bcos.sdk.abi.datatypes.Function;
import org.fisco.bcos.sdk.abi.datatypes.Type;
import org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32;
import org.fisco.bcos.sdk.abi.datatypes.generated.Int256;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple1;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple2;
import org.fisco.bcos.sdk.abi.datatypes.generated.tuples.generated.Tuple3;
import org.fisco.bcos.sdk.client.Client;
import org.fisco.bcos.sdk.contract.Contract;
import org.fisco.bcos.sdk.crypto.CryptoSuite;
import org.fisco.bcos.sdk.crypto.keypair.CryptoKeyPair;
import org.fisco.bcos.sdk.eventsub.EventCallback;
import org.fisco.bcos.sdk.model.CryptoType;
import org.fisco.bcos.sdk.model.TransactionReceipt;
import org.fisco.bcos.sdk.model.callback.TransactionCallback;
import org.fisco.bcos.sdk.transaction.model.exception.ContractException;

@SuppressWarnings("unchecked")
public class SupplyChainFinance extends Contract {
    public static final String[] BINARY_ARRAY = {"608060405234801561001057600080fd5b5033600460006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550612f95806100616000396000f300608060405260043610610099576000357c0100000000000000000000000000000000000000000000000000000000900463ffffffff16806312065fe01461009e57806329092d0e146100c95780632b12d308146101245780634e8d7278146101895780637a0c614b146101dc5780637eb371fd1461024f57806384c52391146102945780638ac64e9a146102f5578063f18ad6fb14610356575b600080fd5b3480156100aa57600080fd5b506100b3610390565b6040518082815260200191505060405180910390f35b3480156100d557600080fd5b5061010a600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291905050506105cb565b604051808215151515815260200191505060405180910390f35b34801561013057600080fd5b5061016f600480360381019080803573ffffffffffffffffffffffffffffffffffffffff1690602001909291908035906020019092919050505061086b565b604051808215151515815260200191505060405180910390f35b34801561019557600080fd5b506101c2600480360381019080803560001916906020019092919080359060200190929190505050610b1b565b604051808215151515815260200191505060405180910390f35b3480156101e857600080fd5b50610235600480360381019080803573ffffffffffffffffffffffffffffffffffffffff169060200190929190803560001916906020019092919080359060200190929190505050611656565b604051808215151515815260200191505060405180910390f35b34801561025b57600080fd5b5061027e60048036038101908080356000191690602001909291905050506119f8565b6040518082815260200191505060405180910390f35b3480156102a057600080fd5b506102db6004803603810190808035600019169060200190929190803590602001909291908035600019169060200190929190505050611ffc565b604051808215151515815260200191505060405180910390f35b34801561030157600080fd5b5061033c6004803603810190808035600019169060200190929190803590602001909291908035600019169060200190929190505050612927565b604051808215151515815260200191505060405180910390f35b34801561036257600080fd5b5061036b612d02565b6040518083600019166000191681526020018281526020019250505060405180910390f35b60003373ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff161415151561047e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f417574683a2061646d696e6973747261746f7220646f6573206e6f742068617681526020017f65206120656e746572707269736500000000000000000000000000000000000081525060400191505060405180910390fd5b600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff161515610568576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f417574683a2074686973206164647265737320646964206e6f7420637265617481526020017f65206120656e746572707269736500000000000000000000000000000000000081525060400191505060405180910390fd5b60016000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546000191660001916815260200190815260200160002054905090565b60003373ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610692576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f417574683a2061646d696e6973747261746f722072657175697265640000000081525060200191505060405180910390fd5b600260008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff16151561077c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001807f546865206164647265737320726570726573656e7473206e6f20656e7465727081526020017f726973657300000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6000600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff0219169083151502179055507fd90d6958f2628a3abefba4dccbf3c94ca4c818186712a029dc139e948d88166e82604051808273ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001807f4e6f6465277320456e74657270726973652052656d6f7665642100000000000081525060200191505060405180910390a160019050919050565b60003373ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16141515610932576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f417574683a2061646d696e6973747261746f722072657175697265640000000081525060200191505060405180910390fd5b600260008473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff161515610a1c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260258152602001807f546865206164647265737320726570726573656e7473206e6f20656e7465727081526020017f726973657300000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b8160016000600260008773ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015460001916600019168152602001908152602001600020819055507f3e04ece4996cd7dbb04e27195c4afb0cde1438d50587cbb13cfd1eaf85c910538383604051808373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001828152602001807f5365742042616c616e63650000000000000000000000000000000000000000008152506020019250505060405180910390a16001905092915050565b6000806000806000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff168015610bc0575060028060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154145b1515610c5a576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f417574683a20737570706c7920656e746572707269736573207265717569726581526020017f640000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60026000600360008a6000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff161515610d59576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601b8152602001807f54686520726563656976657220646f65736e277420657869737421000000000081525060200191505060405180910390fd5b600360026000600360008b6000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154141515610e74576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f5468652072656365697665722068617320746f2062652061205468697264506181526020017f727479210000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60028060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154141515610f53576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252602e8152602001807f4f6e6c7920537570706c79456e7465727072697365732063616e2066696e616e81526020017f636520627920766f75636865722100000000000000000000000000000000000081525060400191505060405180910390fd5b6000935060009250600091505b60008054905082101561158157600082815481101515610f7c57fe5b906000526020600020906005020160040160009054906101000a900460ff16801561","10105750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015460001916600083815481101515610ff857fe5b90600052602060002090600502016000015460001916145b15611574578560008381548110151561102557fe5b90600052602060002090600502016002015413156111c0578560008381548110151561104d57fe5b906000526020600020906005020160020160008282540392505081905550600060a0604051908101604052808960001916815260200160008581548110151561109257fe5b9060005260206000209060050201600101546000191681526020018881526020016000801916815260200160011515815250908060018154018082558091505090600182039060005260206000209060050201600090919290919091506000820151816000019060001916905560208201518160010190600019169055604082015181600201556060820151816003019060001916905560808201518160040160006101000a81548160ff0219169083151502179055505050508560016000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546000191660001916815260200190815260200160002060008282540192505081905550600192506112ac565b856000838154811015156111d057fe5b906000526020600020906005020160020154141561128557866000838154811015156111f857fe5b906000526020600020906005020160000181600019169055508560016000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546000191660001916815260200190815260200160002060008282540192505081905550600192506112ab565b60008281548110151561129457fe5b906000526020600020906005020160020154840193505b5b858412151561157357858413156112e9578584036000838154811015156112cf57fe5b906000526020600020906005020160020181905550611322565b600080838154811015156112f957fe5b906000526020600020906005020160040160006101000a81548160ff0219169083151502179055505b6001820390505b6000811015156114225760008181548110151561134257fe5b906000526020600020906005020160040160009054906101000a900460ff1680156113d65750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154600019166000828154811015156113be57fe5b90600052602060002090600502016000015460001916145b1561141457600080828154811015156113eb57fe5b906000526020600020906005020160040160006101000a81548160ff0219169083151502179055505b808060019003915050611329565b600060a0604051908101604052808960001916815260200160008581548110151561144957fe5b9060005260206000209060050201600101546000191681526020018881526020016000801916815260200160011515815250908060018154018082558091505090600182039060005260206000209060050201600090919290919091506000820151816000019060001916905560208201518160010190600019169055604082015181600201556060820151816003019060001916905560808201518160040160006101000a81548160ff0219169083151502179055505050508560016000600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600101546000191660001916815260200190815260200160002060008282540192505081905550600192505b5b8180600101925050610f60565b8215611649577f2f7c557f204139ce5e10c61a43fa5f91cae914d68e31f62f0eec9aa557e1821d87600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010154886040518084600019166000191681526020018360001916600019168152602001828152602001807f537570706c792d54686972645061727479205472616e73616374696f6e000000815250602001935050505060405180910390a15b8294505050505092915050565b60003373ffffffffffffffffffffffffffffffffffffffff16600460009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1614151561171d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252601c8152602001807f417574683a2061646d696e6973747261746f722072657175697265640000000081525060200191505060405180910390fd5b600260008573ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff161515156117e2576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260188152602001807f5468652061646472657373206973206f6363757069656421000000000000000081525060200191505060405180910390fd5b81600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000018190555082600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060010181600019169055506001600260008673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160006101000a81548160ff0219169083151502179055506000600160008560001916600019168152602001908152602001600020819055508360036000856000191660001916815260200190815260200160002060006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055507ff9be045a5de76729eae03a527266a1f37244fc769f62c217af043342478ffa33848484604051808473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020018360001916600019168152602001828152602001807f456e746572707269736520437265617465642100000000000000000000000000815250602001935050505060405180910390a1600190509392505050565b600080600080600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060020160009054906101000a900460ff168015611a9b575060028060003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154145b1515611b35576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260218152602001807f417574683a20737570706c7920656e746572707269736573207265717569726581526020017f640000000000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60016002600060036000896000191660001916815260200190815260200160002060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060000154141515611c50576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260268152602001807f54686520646562746f722068617320746f206265206120436f7265456e74657281526020017f707269736521000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b6001600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206000015414151515611d31576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825260248152602001807f436f7265456e7465727072697365732063616e2774206861766520766f75636881526020017f657273210000000000000000000000000000000000000000000000000000000081525060400191505060405180910390fd5b60009250600091505b600080549050821015611f3057600082815481101515611d5657fe5b906000526020600020906005020160040160009054906101000a900460ff168015611dea5750600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015460001916600083815481101515611dd257fe5b90600052602060002090600502016000015460001916145b8015611e1d57508460001916600083815481101515611e0557fe5b90600052602060002090600502016001015460001916145b15611f2357600082815481101515611e3157fe5b906000526020600020906005020160020154836001600088600019166000191681526020019081526020016000205403121515611eca57600082815481101515611e7757fe5b9060005260206000209060050201600201548301925060008083815481101515611e9d57fe5b906000526020600020906005020160040160006101000a81548160ff021916908315150217905550611f22565b8260016000876000191660001916815260200190815260200160002054039050808301925080600083815481101515611eff57fe5b906000526020600020906005020160020160008282540392505081905550611f30565b5b8180600101925050611d3a565b7f7d5155bda452c0a6aa6f1fa3a8e84a87184c3ef9fd815d06c2f452af1730cfb1600260003373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000206001015486856040518084600019",""};

    public static final String BINARY = String.join("", BINARY_ARRAY);

    public static final String[] SM_BINARY_ARRAY = {"","",""};

    public static final String SM_BINARY = String.join("", SM_BINARY_ARRAY);

    public static final String[] ABI_ARRAY = {"[{\"constant\":true,\"inputs\":[],\"name\":\"getBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"}],\"name\":\"remove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"balance\",\"type\":\"int256\"}],\"name\":\"setBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"int256\"}],\"name\":\"financingByVoucher\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"addr\",\"type\":\"address\"},{\"name\":\"name\",\"type\":\"bytes32\"},{\"name\":\"kind\",\"type\":\"int256\"}],\"name\":\"create\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"debtor\",\"type\":\"bytes32\"}],\"name\":\"payVoucher\",\"outputs\":[{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"receiver\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"int256\"},{\"name\":\"goods\",\"type\":\"bytes32\"}],\"name\":\"transferVoucher\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"creditor\",\"type\":\"bytes32\"},{\"name\":\"amount\",\"type\":\"int256\"},{\"name\":\"goods\",\"type\":\"bytes32\"}],\"name\":\"createVoucher\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecord\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"},{\"name\":\"\",\"type\":\"int256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"name\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"kind\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"bytes32\"}],\"name\":\"createEnterpriseEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"bytes32\"}],\"name\":\"removeEnterpriseEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"addr\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"balance\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"bytes32\"}],\"name\":\"setBalanceEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"creditor\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"debtor\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"goods\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"bytes32\"}],\"name\":\"createVoucherEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"creditor\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"debtor\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"goods\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"bytes32\"}],\"name\":\"transferVoucherEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"creditor\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"debtor\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"bytes32\"}],\"name\":\"financingByVoucherEvent\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"creditor\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"debtor\",\"type\":\"bytes32\"},{\"indexed\":false,\"name\":\"pays\",\"type\":\"int256\"},{\"indexed\":false,\"name\":\"message\",\"type\":\"bytes32\"}],\"name\":\"payVoucherEvent\",\"type\":\"event\"}]"};

    public static final String ABI = String.join("", ABI_ARRAY);

    public static final String FUNC_GETBALANCE = "getBalance";

    public static final String FUNC_REMOVE = "remove";

    public static final String FUNC_SETBALANCE = "setBalance";

    public static final String FUNC_FINANCINGBYVOUCHER = "financingByVoucher";

    public static final String FUNC_CREATE = "create";

    public static final String FUNC_PAYVOUCHER = "payVoucher";

    public static final String FUNC_TRANSFERVOUCHER = "transferVoucher";

    public static final String FUNC_CREATEVOUCHER = "createVoucher";

    public static final String FUNC_GETRECORD = "getRecord";

    public static final Event CREATEENTERPRISEEVENT_EVENT = new Event("createEnterpriseEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event REMOVEENTERPRISEEVENT_EVENT = new Event("removeEnterpriseEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event SETBALANCEEVENT_EVENT = new Event("setBalanceEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event CREATEVOUCHEREVENT_EVENT = new Event("createVoucherEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event TRANSFERVOUCHEREVENT_EVENT = new Event("transferVoucherEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event FINANCINGBYVOUCHEREVENT_EVENT = new Event("financingByVoucherEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}));
    ;

    public static final Event PAYVOUCHEREVENT_EVENT = new Event("payVoucherEvent", 
            Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}));
    ;

    protected SupplyChainFinance(String contractAddress, Client client, CryptoKeyPair credential) {
        super(getBinary(client.getCryptoSuite()), contractAddress, client, credential);
    }

    public static String getBinary(CryptoSuite cryptoSuite) {
        return (cryptoSuite.getCryptoTypeConfig() == CryptoType.ECDSA_TYPE ? BINARY : SM_BINARY);
    }

    public BigInteger getBalance() throws ContractException {
        final Function function = new Function(FUNC_GETBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        return executeCallWithSingleValueReturn(function, BigInteger.class);
    }

    public TransactionReceipt remove(String addr) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void remove(String addr, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForRemove(String addr) {
        final Function function = new Function(
                FUNC_REMOVE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<String> getRemoveInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<String>(

                (String) results.get(0).getValue()
                );
    }

    public Tuple1<Boolean> getRemoveOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_REMOVE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt setBalance(String addr, BigInteger balance) {
        final Function function = new Function(
                FUNC_SETBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(balance)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void setBalance(String addr, BigInteger balance, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_SETBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(balance)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForSetBalance(String addr, BigInteger balance) {
        final Function function = new Function(
                FUNC_SETBALANCE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(balance)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<String, BigInteger> getSetBalanceInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_SETBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<String, BigInteger>(

                (String) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getSetBalanceOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_SETBALANCE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt financingByVoucher(byte[] receiver, BigInteger amount) {
        final Function function = new Function(
                FUNC_FINANCINGBYVOUCHER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(receiver), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void financingByVoucher(byte[] receiver, BigInteger amount, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_FINANCINGBYVOUCHER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(receiver), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForFinancingByVoucher(byte[] receiver, BigInteger amount) {
        final Function function = new Function(
                FUNC_FINANCINGBYVOUCHER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(receiver), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(amount)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple2<byte[], BigInteger> getFinancingByVoucherInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_FINANCINGBYVOUCHER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple2<byte[], BigInteger>(

                (byte[]) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue()
                );
    }

    public Tuple1<Boolean> getFinancingByVoucherOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_FINANCINGBYVOUCHER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt create(String addr, byte[] name, BigInteger kind) {
        final Function function = new Function(
                FUNC_CREATE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(kind)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void create(String addr, byte[] name, BigInteger kind, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(kind)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreate(String addr, byte[] name, BigInteger kind) {
        final Function function = new Function(
                FUNC_CREATE, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.Address(addr), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(name), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(kind)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<String, byte[], BigInteger> getCreateInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Address>() {}, new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<String, byte[], BigInteger>(

                (String) results.get(0).getValue(), 
                (byte[]) results.get(1).getValue(), 
                (BigInteger) results.get(2).getValue()
                );
    }

    public Tuple1<Boolean> getCreateOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATE, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt payVoucher(byte[] debtor) {
        final Function function = new Function(
                FUNC_PAYVOUCHER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(debtor)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void payVoucher(byte[] debtor, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_PAYVOUCHER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(debtor)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForPayVoucher(byte[] debtor) {
        final Function function = new Function(
                FUNC_PAYVOUCHER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(debtor)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple1<byte[]> getPayVoucherInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_PAYVOUCHER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<byte[]>(

                (byte[]) results.get(0).getValue()
                );
    }

    public Tuple1<BigInteger> getPayVoucherOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_PAYVOUCHER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Int256>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<BigInteger>(

                (BigInteger) results.get(0).getValue()
                );
    }

    public TransactionReceipt transferVoucher(byte[] receiver, BigInteger amount, byte[] goods) {
        final Function function = new Function(
                FUNC_TRANSFERVOUCHER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(receiver), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(amount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(goods)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void transferVoucher(byte[] receiver, BigInteger amount, byte[] goods, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_TRANSFERVOUCHER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(receiver), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(amount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(goods)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForTransferVoucher(byte[] receiver, BigInteger amount, byte[] goods) {
        final Function function = new Function(
                FUNC_TRANSFERVOUCHER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(receiver), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(amount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(goods)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<byte[], BigInteger, byte[]> getTransferVoucherInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_TRANSFERVOUCHER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<byte[], BigInteger, byte[]>(

                (byte[]) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue()
                );
    }

    public Tuple1<Boolean> getTransferVoucherOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_TRANSFERVOUCHER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public TransactionReceipt createVoucher(byte[] creditor, BigInteger amount, byte[] goods) {
        final Function function = new Function(
                FUNC_CREATEVOUCHER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(creditor), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(amount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(goods)), 
                Collections.<TypeReference<?>>emptyList());
        return executeTransaction(function);
    }

    public void createVoucher(byte[] creditor, BigInteger amount, byte[] goods, TransactionCallback callback) {
        final Function function = new Function(
                FUNC_CREATEVOUCHER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(creditor), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(amount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(goods)), 
                Collections.<TypeReference<?>>emptyList());
        asyncExecuteTransaction(function, callback);
    }

    public String getSignedTransactionForCreateVoucher(byte[] creditor, BigInteger amount, byte[] goods) {
        final Function function = new Function(
                FUNC_CREATEVOUCHER, 
                Arrays.<Type>asList(new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(creditor), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Int256(amount), 
                new org.fisco.bcos.sdk.abi.datatypes.generated.Bytes32(goods)), 
                Collections.<TypeReference<?>>emptyList());
        return createSignedTransaction(function);
    }

    public Tuple3<byte[], BigInteger, byte[]> getCreateVoucherInput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getInput().substring(10);
        final Function function = new Function(FUNC_CREATEVOUCHER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}, new TypeReference<Bytes32>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple3<byte[], BigInteger, byte[]>(

                (byte[]) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue(), 
                (byte[]) results.get(2).getValue()
                );
    }

    public Tuple1<Boolean> getCreateVoucherOutput(TransactionReceipt transactionReceipt) {
        String data = transactionReceipt.getOutput();
        final Function function = new Function(FUNC_CREATEVOUCHER, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bool>() {}));
        List<Type> results = FunctionReturnDecoder.decode(data, function.getOutputParameters());
        return new Tuple1<Boolean>(

                (Boolean) results.get(0).getValue()
                );
    }

    public Tuple2<byte[], BigInteger> getRecord() throws ContractException {
        final Function function = new Function(FUNC_GETRECORD, 
                Arrays.<Type>asList(), 
                Arrays.<TypeReference<?>>asList(new TypeReference<Bytes32>() {}, new TypeReference<Int256>() {}));
        List<Type> results = executeCallWithMultipleValueReturn(function);
        return new Tuple2<byte[], BigInteger>(
                (byte[]) results.get(0).getValue(), 
                (BigInteger) results.get(1).getValue());
    }

    public List<CreateEnterpriseEventEventResponse> getCreateEnterpriseEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEENTERPRISEEVENT_EVENT, transactionReceipt);
        ArrayList<CreateEnterpriseEventEventResponse> responses = new ArrayList<CreateEnterpriseEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateEnterpriseEventEventResponse typedResponse = new CreateEnterpriseEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.name = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.kind = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.message = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeCreateEnterpriseEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATEENTERPRISEEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeCreateEnterpriseEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATEENTERPRISEEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<RemoveEnterpriseEventEventResponse> getRemoveEnterpriseEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(REMOVEENTERPRISEEVENT_EVENT, transactionReceipt);
        ArrayList<RemoveEnterpriseEventEventResponse> responses = new ArrayList<RemoveEnterpriseEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            RemoveEnterpriseEventEventResponse typedResponse = new RemoveEnterpriseEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.message = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeRemoveEnterpriseEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVEENTERPRISEEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeRemoveEnterpriseEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(REMOVEENTERPRISEEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<SetBalanceEventEventResponse> getSetBalanceEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(SETBALANCEEVENT_EVENT, transactionReceipt);
        ArrayList<SetBalanceEventEventResponse> responses = new ArrayList<SetBalanceEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            SetBalanceEventEventResponse typedResponse = new SetBalanceEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.addr = (String) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.balance = (BigInteger) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.message = (byte[]) eventValues.getNonIndexedValues().get(2).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeSetBalanceEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(SETBALANCEEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeSetBalanceEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(SETBALANCEEVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<CreateVoucherEventEventResponse> getCreateVoucherEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(CREATEVOUCHEREVENT_EVENT, transactionReceipt);
        ArrayList<CreateVoucherEventEventResponse> responses = new ArrayList<CreateVoucherEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            CreateVoucherEventEventResponse typedResponse = new CreateVoucherEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.creditor = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.debtor = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.goods = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.message = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeCreateVoucherEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATEVOUCHEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeCreateVoucherEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(CREATEVOUCHEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<TransferVoucherEventEventResponse> getTransferVoucherEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(TRANSFERVOUCHEREVENT_EVENT, transactionReceipt);
        ArrayList<TransferVoucherEventEventResponse> responses = new ArrayList<TransferVoucherEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            TransferVoucherEventEventResponse typedResponse = new TransferVoucherEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.creditor = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.debtor = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.goods = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            typedResponse.message = (byte[]) eventValues.getNonIndexedValues().get(4).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeTransferVoucherEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFERVOUCHEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeTransferVoucherEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(TRANSFERVOUCHEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<FinancingByVoucherEventEventResponse> getFinancingByVoucherEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(FINANCINGBYVOUCHEREVENT_EVENT, transactionReceipt);
        ArrayList<FinancingByVoucherEventEventResponse> responses = new ArrayList<FinancingByVoucherEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            FinancingByVoucherEventEventResponse typedResponse = new FinancingByVoucherEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.creditor = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.debtor = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.amount = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.message = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribeFinancingByVoucherEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(FINANCINGBYVOUCHEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribeFinancingByVoucherEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(FINANCINGBYVOUCHEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public List<PayVoucherEventEventResponse> getPayVoucherEventEvents(TransactionReceipt transactionReceipt) {
        List<Contract.EventValuesWithLog> valueList = extractEventParametersWithLog(PAYVOUCHEREVENT_EVENT, transactionReceipt);
        ArrayList<PayVoucherEventEventResponse> responses = new ArrayList<PayVoucherEventEventResponse>(valueList.size());
        for (Contract.EventValuesWithLog eventValues : valueList) {
            PayVoucherEventEventResponse typedResponse = new PayVoucherEventEventResponse();
            typedResponse.log = eventValues.getLog();
            typedResponse.creditor = (byte[]) eventValues.getNonIndexedValues().get(0).getValue();
            typedResponse.debtor = (byte[]) eventValues.getNonIndexedValues().get(1).getValue();
            typedResponse.pays = (BigInteger) eventValues.getNonIndexedValues().get(2).getValue();
            typedResponse.message = (byte[]) eventValues.getNonIndexedValues().get(3).getValue();
            responses.add(typedResponse);
        }
        return responses;
    }

    public void subscribePayVoucherEventEvent(String fromBlock, String toBlock, List<String> otherTopics, EventCallback callback) {
        String topic0 = eventEncoder.encode(PAYVOUCHEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,fromBlock,toBlock,otherTopics,callback);
    }

    public void subscribePayVoucherEventEvent(EventCallback callback) {
        String topic0 = eventEncoder.encode(PAYVOUCHEREVENT_EVENT);
        subscribeEvent(ABI,BINARY,topic0,callback);
    }

    public static SupplyChainFinance load(String contractAddress, Client client, CryptoKeyPair credential) {
        return new SupplyChainFinance(contractAddress, client, credential);
    }

    public static SupplyChainFinance deploy(Client client, CryptoKeyPair credential) throws ContractException {
        return deploy(SupplyChainFinance.class, client, credential, getBinary(client.getCryptoSuite()), "");
    }

    public static class CreateEnterpriseEventEventResponse {
        public TransactionReceipt.Logs log;

        public String addr;

        public byte[] name;

        public BigInteger kind;

        public byte[] message;
    }

    public static class RemoveEnterpriseEventEventResponse {
        public TransactionReceipt.Logs log;

        public String addr;

        public byte[] message;
    }

    public static class SetBalanceEventEventResponse {
        public TransactionReceipt.Logs log;

        public String addr;

        public BigInteger balance;

        public byte[] message;
    }

    public static class CreateVoucherEventEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] creditor;

        public byte[] debtor;

        public BigInteger amount;

        public byte[] goods;

        public byte[] message;
    }

    public static class TransferVoucherEventEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] creditor;

        public byte[] debtor;

        public BigInteger amount;

        public byte[] goods;

        public byte[] message;
    }

    public static class FinancingByVoucherEventEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] creditor;

        public byte[] debtor;

        public BigInteger amount;

        public byte[] message;
    }

    public static class PayVoucherEventEventResponse {
        public TransactionReceipt.Logs log;

        public byte[] creditor;

        public byte[] debtor;

        public BigInteger pays;

        public byte[] message;
    }
}
